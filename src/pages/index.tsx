import { SignInButton, SignOutButton, useUser } from "@clerk/nextjs";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useState } from "react";
import { toast } from "react-hot-toast";
import LoadingSpinner from "~/components/Loading";
import { RouterOutputs, api } from "~/utils/api";

//extend dayjs
dayjs.extend(relativeTime);

const Home: NextPage = () => {
  //start fetching asap
  api.posts.getAll.useQuery();

  const { isLoaded: userLoaded, isSignedIn } = useUser();

  //empty div when the user is not loaded
  if (!userLoaded) return <div />;

  return (
    <>
      <Head>
        <title>Chirp</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center">
        <div className="min-h-screen w-full border-x border-slate-400 md:max-w-2xl">
          <div className="min-h-[70px] border-b border-slate-400 p-4">
            {isSignedIn ? (
              <CreatePostWizzard />
            ) : (
              <div className="flex justify-center">
                <SignInButton>
                  <button className="rounded-lg bg-slate-200 px-4 py-2 text-black">
                    Sing In
                  </button>
                </SignInButton>
              </div>
            )}
          </div>

          <Feed />
        </div>
      </main>
    </>
  );
};

export default Home;

const CreatePostWizzard = () => {
  const { user } = useUser();

  const [input, setInput] = useState("");

  const ctx = api.useContext();

  const { mutate, isLoading: isPosting } = api.posts.create.useMutation({
    onSuccess: () => {
      setInput("");
      void ctx.posts.getAll.invalidate();
      toast.success("Posted", {
        position: "bottom-center",
        duration: 2000,
      });
    },

    onError: (e) => {
      const errorMessage = e.data?.zodError?.fieldErrors.content;

      if (errorMessage && errorMessage[0]) {
        toast.error(errorMessage[0], {
          position: "bottom-center",
          duration: 2000,
        });
      }
    },
  });

  if (!user) return null;

  function executeMutation() {
    mutate({ content: input });
    setInput(""); //set it asap
  }

  return (
    <div className="flex items-center gap-5">
      <Image
        src={user.profileImageUrl}
        alt="user profile image"
        width={50}
        height={50}
        className="rounded-full"
      />

      <input
        type="text"
        className="flex-grow border-none bg-transparent text-slate-400 outline-none"
        placeholder="Type Some Emojis!"
        onChange={(e) => setInput(e.target.value)}
        value={input}
        disabled={isPosting}
        //! On any Key press it will post
        onKeyDown={(e) => {
          e.preventDefault();
          if (input) executeMutation();
        }}
      />

      {input && !isPosting && (
        <button
          onClick={executeMutation}
          type="submit"
          disabled={isPosting}
          className="ml-auto rounded-lg bg-slate-200 px-2 py-1 text-black"
        >
          Post
        </button>
      )}

      {isPosting && (
        <div className="ml-auto rounded-lg  px-2 py-1 text-black">
          <LoadingSpinner size={20} />
        </div>
      )}

      <SignOutButton>
        <button className="ml-auto rounded-lg bg-slate-200 px-2 py-1 text-black">
          Sing Out
        </button>
      </SignOutButton>
    </div>
  );
};

function LoadingScreen() {
  return (
    <div className="absolute left-0 top-0 grid h-screen w-screen place-content-center">
      <LoadingSpinner size={60} />
    </div>
  );
}

const Feed = () => {
  const { data: postsData, isLoading: postLoading } =
    api.posts.getAll.useQuery();

  if (postLoading) return <LoadingScreen />;

  if (!postsData) return <h1>Something went wrong!</h1>;

  return (
    <div className="flex flex-col">
      {postsData?.map((post) => {
        return <PostView key={post.post.id} PostWithUser={post} />;
      })}
    </div>
  );
};

type PostWithUser = RouterOutputs["posts"]["getAll"][number];
const PostView = (props: { PostWithUser: PostWithUser }) => {
  const {
    PostWithUser: { author, post },
  } = props;
  return (
    <div className="flex items-center justify-start gap-6 border-b border-slate-400  px-2 md:py-4">
      <Image
        alt={`${author.username} profile picture`}
        src={author.profileImageUrl}
        width={48}
        height={48}
        className="rounded-full"
      />
      <div className="flex flex-col items-start justify-center">
        <div className="flex items-center justify-center">
          <Link href={`/@${author.username}`}>
            <span className="text-xs text-slate-400">@{author.username}</span>
          </Link>
          <Link href={`/post/@${post.id}`}>
            <span className="text-xs text-slate-400">
              {` . ${dayjs(post.createdAt).fromNow()}`}
            </span>
          </Link>
        </div>
        <span className="text-xl">{post.content}</span>
      </div>
    </div>
  );
};
